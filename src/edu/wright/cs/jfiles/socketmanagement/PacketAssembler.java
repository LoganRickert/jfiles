/*
 * Copyright (C) 2016 - WSU CEG3120 Students
 * 
 * Roberto C. SÃ¡nchez <roberto.sanchez@wright.edu>
 * 
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 */

package edu.wright.cs.jfiles.socketmanagement;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;

/**
 * This class is used to reassemble packets generated by the SocketManager
 * class.
 * 
 * @author Daryl Arouchian
 *
 */
public class PacketAssembler implements Runnable {

	private final int idNumber;
	//Temporarily unused
	@SuppressWarnings("unused")
	private final byte tag;
	private byte[] packet;
	private boolean ended = false;
	private boolean readyForNext = false;
	private boolean packetExchanged = true;
	private File finishedFile = null;
	private Thread thrd = null;

	/**
	 * constructs the PacketAssemble object with an assigned ID number and
	 * initial packet.
	 * 
	 * @param tag
	 *            TrafficTag byte value of the packet
	 * @param idnum
	 *            ID number associated with every packet and this object
	 * @param packet
	 *            The initial packet to begin assembly process
	 */
	public PacketAssembler(byte tag, int idnum, byte[] packet) {

		this.tag = tag;
		idNumber = idnum;
		this.packet = packet;
		thrd = new Thread(this);
		thrd.start();
	}

	@Override
	public void run() {
		String tempName = "" + idNumber + "";
		File tempFile = null;
		FileOutputStream fos = null;
		try {
			tempFile = File.createTempFile(tempName, null);
			fos = new FileOutputStream(tempFile);
		} catch (FileNotFoundException e) {
			// TODO AUTO-generated catch block
			System.out.println("Temp File not found");
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			System.out.println("TempFile creation failed.");
			e.printStackTrace();
		}
		while (!ended) {
			if (packetExchanged) {
				readyForNext = false;
				packetExchanged = false;
				try {
					fos.write(packet);
					fos.flush();
				} catch (IOException e) {
					// TODO Auto-generated catch block
					System.out.println("Failed to write a packet to file");
					e.printStackTrace();
				}
				readyForNext = true;
			}
		}
		try {
			fos.close();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			System.out.println("Failed to close output stream for" + tempName + ".tmp");
			e.printStackTrace();
		}
		finishedFile = tempFile;
	}

	/**
	 * Returns the ID number associated with this instance.
	 * 
	 * @return ID number
	 */
	public int getId() {
		return idNumber;
	}

	/**
	 * Ends the packet assembly process and finalizes file.
	 * 
	 */
	public void end() {
		ended = true;
	}

	/**
	 * Checks the status of this packet assembler.
	 * 
	 * @return true if the packet assembler is still active
	 */
	public boolean isDone() {
		boolean done = false;

		if (!thrd.isAlive()) {
			done = true;
		}
		return done;
	}

	/**
	 * Blocks until this packet assembler is done.
	 * 
	 * @return true once done
	 */
	public boolean waitForDone() {
		while (!isDone()) {
			continue;
		}
		return true;
	}

	/**
	 * Blocks until packet assembler is ready for next packet.
	 * 
	 * @return true once packet assembler is ready to received next packet
	 */
	public boolean waitForReady() {
		while (!ended && !readyForNext) {
			continue;
		}
		return readyForNext;
	}

	/**
	 * Exchanges the packet being processed by the packet assembler.
	 * 
	 * @param temp
	 *            The packet to exchange
	 */
	public void exchangePacket(byte[] temp) {
		this.packet = temp;
		packetExchanged = true;
	}

	/**
	 * Returns the finished file or null if the file is not finished.
	 * 
	 * @return the file or null if not finished
	 */
	public File getFile() {
		return finishedFile;
	}

}
